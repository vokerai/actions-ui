{
	"name": "action-toggle",
	"dependencies": [
		"bits-ui",
		"svelte-sonner",
		"mode-watcher"
	],
	"registryDependencies": [],
	"shadcnDependencies": [
		"sonner",
		"toggle"
	],
	"files": [
		{
			"name": "index.ts",
			"content": "import Root from './root.svelte';\nimport ErrorToast from './toast/toast.svelte';\n\nexport { Root, ErrorToast };\n"
		},
		{
			"name": "root.svelte",
			"content": "<script lang=\"ts\">\n    import { Toggle } from '$lib/components/ui/toggle/index.ts';\n    import type { ErrorReturn } from '../shared/types';\n    import { createToastErrorCtx } from './toast/context';\n    import { Toggle as TogglePrimitive } from 'bits-ui';\n\n    type onPressedChangeType = ((value: boolean) => ErrorReturn) | undefined;\n\n    type $$Props = TogglePrimitive.Props & {\n        onPressedChange: onPressedChangeType;\n    };\n    export let pressed: $$Props['pressed'] = false;\n    export let onPressedChange: onPressedChangeType = undefined;\n    export let disabled = false;\n\n    const toastError = createToastErrorCtx();\n\n    const changed = async (newValue: boolean | 'indeterminate') => {\n        if (onPressedChange === undefined) {\n            return;\n        }\n\n        if (newValue === 'indeterminate') {\n            return;\n        }\n\n        disabled = true;\n        const startingState = pressed;\n        $toastError = undefined;\n\n        try {\n            const { error } = await onPressedChange(newValue);\n\n            if (error === undefined) {\n                return;\n            }\n\n            pressed = startingState;\n            $toastError = error;\n        } catch {\n            pressed = startingState;\n            $toastError = 'Error using toggle';\n        } finally {\n            disabled = false;\n        }\n    };\n</script>\n\n<Toggle\n    bind:pressed\n    onPressedChange=\"{changed}\"\n    {disabled}\n    {...$$restProps}\n    role=\"toggle\"\n>\n    <slot />\n</Toggle>\n"
		},
		{
			"name": "toast/context.ts",
			"content": "import { getContext, setContext } from 'svelte';\nimport { writable, type Writable } from 'svelte/store';\n\nconst sonnerContextKey = 'actionsui-sonner-error';\n\nexport let createToastErrorCtx = (): Writable<string | undefined> => {\n    const ctx = writable<string | undefined>(undefined);\n    setContext(sonnerContextKey, ctx);\n    return ctx;\n};\n\nexport let getToastErrorCtx = (): Writable<string | undefined> => {\n    return getContext<Writable<string | undefined>>(sonnerContextKey);\n};\n"
		},
		{
			"name": "toast/toast.svelte",
			"content": "<script lang=\"ts\">\n    import { toast } from 'svelte-sonner';\n    import { getToastErrorCtx } from './context.js';\n    import { onMount } from 'svelte';\n\n    export let title: string;\n\n    const ctx = getToastErrorCtx();\n\n    const sendToast = (description: string | undefined) => {\n        if (description === undefined) {\n            return;\n        }\n\n        toast.error(title, { description });\n    };\n\n    onMount(() => {\n        ctx.subscribe((description) => {\n            sendToast(description);\n        });\n    });\n</script>\n"
		}
	],
	"type": "components:actions-ui"
}